name: Continuous Integration

on:
  push:
    branches:
    - master

  pull_request:
    branches:
    - master

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: jorgemb/albumarchitect:$(date +%s)
          context: .
          file: docker/build-clang.Dockerfile

#  lint:
#    runs-on: ubuntu-24.04
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - uses: actions/setup-python@v5
#      with: { python-version: "3.8" }
#
#    - name: Install codespell
#      run: pip3 install codespell
#
#    - name: Install linter
#      run: sudo apt-get install -y clang-format
##      run: sudo apt-get install -y clang-format-14
#
#    - name: Lint
##      run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake
#      run: cmake -D FORMAT_COMMAND=clang-format -P cmake/lint.cmake
#
#    - name: Spell check
#      if: always()
#      run: cmake -P cmake/spell.cmake
#
#  coverage:
#    needs: [lint]
#
#    runs-on: ubuntu-24.04
#
#    # To enable coverage, delete the last line from the conditional below and
#    # edit the "<name>" placeholder to your GitHub name.
#    # If you do not wish to use codecov, then simply delete this job from the
#    # workflow.
#    if: github.repository_owner == '<name>'
#      && false
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Install LCov
#      run: sudo apt-get update -q
#        && sudo apt-get install lcov -q -y
#
#    - name: Install vcpkg
#      uses: friendlyanon/setup-vcpkg@v1
#      with: { committish: "${{ env.VCPKG_COMMIT }}" }
#
#    - name: Configure
#      run: cmake --preset=ci-coverage
#
#    - name: Build
#      run: cmake --build build/coverage -j 2
#
#    - name: Test
#      working-directory: build/coverage
#      run: ctest --output-on-failure --no-tests=error -j 2
#
#    - name: Process coverage info
#      run: cmake --build build/coverage -t coverage
#
#    - name: Submit to codecov.io
#      uses: codecov/codecov-action@v4
#      with:
#        file: build/coverage/coverage.info
#        token: ${{ secrets.CODECOV_TOKEN }}
#
#  test:
#    needs: [lint]
#
#    runs-on: ubuntu-24.04
#
#    env:
##      CC: /usr/bin/clang-14
##      CXX: /usr/bin/clang++-14
#       CC: /usr/bin/clang
#       CXX: /usr/bin/clang++
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
#      with:
#        submodules: 'true'
#
#    - name: Install requirements
#      run: |
#        sudo apt-get update && sudo apt-get install -y \
#          autoconf \
#          automake \
#          bison \
#          build-essential \
#          clang-format \
#          clang-tidy \
#          clang \
#          cmake \
#          cppcheck \
#          curl \
#          git \
#          libtool \
#          libx11-dev \
#          libxext-dev \
#          libxft-dev \
#          libxi-dev \
#          libxrandr-dev \
#          libxtst-dev \
#          nasm \
#          ninja-build \
#          openimageio-tools \
#          pkg-config \
#          python3 \
#          python3-setuptools \
#          python3-jinja2 \
#          tar \
#          unzip \
#          zip
#
#
##        sudo update-alternatives --install \
##          /usr/bin/clang-tidy clang-tidy \
##          /usr/bin/clang-tidy-14 140
#
#    - name: Install vcpkg
#      uses: friendlyanon/setup-vcpkg@v1
#      with: { committish: "${{ env.VCPKG_COMMIT }}" }
#
#    - name: Sanitize_Configure
#      run: cmake --preset=ci-sanitize
#
#    - name: Sanitize_Build
#      run: cmake --build build/sanitize -j 2
#
#    - name: Sanitize_Test
#      working-directory: build/sanitize
#      env:
#        ASAN_OPTIONS: "strict_string_checks=1:\
#          detect_stack_use_after_return=1:\
#          check_initialization_order=1:\
#          strict_init_order=1:\
#          detect_leaks=1:\
#          halt_on_error=1"
#        UBSAN_OPTIONS: "print_stacktrace=1:\
#          halt_on_error=1"
#      run: ctest --output-on-failure --no-tests=error -j 2
#
#    - name: Configure
#      shell: pwsh
#      run: cmake --preset=ci-ubuntu
#
#    - name: Build
#      run: cmake --build build --config Release -j 2
#
#    - name: Install
#      run: cmake --install build --config Release --prefix prefix
#
#    - name: Test
#      working-directory: build
#      run: ctest --output-on-failure --no-tests=error -C Release -j 2
#
#  docs:
#    # Deploy docs only when builds succeed
#    needs: [test]
#
#    runs-on: ubuntu-24.04
#
#    # To enable, first you have to create an orphaned gh-pages branch:
#    #
#    #    git switch --orphan gh-pages
#    #    git commit --allow-empty -m "Initial commit"
#    #    git push -u origin gh-pages
#    #
#    # Edit the <name> placeholder below to your GitHub name, so this action
#    # runs only in your repository and no one else's fork. After these, delete
#    # this comment and the last line in the conditional below.
#    # If you do not wish to use GitHub Pages for deploying documentation, then
#    # simply delete this job similarly to the coverage one.
#    if: github.ref == 'refs/heads/master'
#      && github.event_name == 'push'
#      && github.repository_owner == '<name>'
#      && false
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - uses: actions/setup-python@v5
#      with: { python-version: "3.8" }
#
#    - name: Install m.css dependencies
#      run: pip3 install jinja2 Pygments
#
#    - name: Install Doxygen
#      run: sudo apt-get update -q
#        && sudo apt-get install doxygen -q -y
#
#    - name: Build docs
#      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
#        -P cmake/docs-ci.cmake
#
#    - name: Deploy docs
#      uses: peaceiris/actions-gh-pages@v4
#      with:
#        github_token: ${{ secrets.GITHUB_TOKEN }}
#        publish_dir: build/docs/html
